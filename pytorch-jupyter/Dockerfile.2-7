FROM nvidia/cuda:8.0-cudnn6-devel-ubuntu14.04
ENV DEBIAN_FRONTEND=noninteractive

ARG THEANO_VERSION=master
ARG TENSORFLOW_VERSION=0.6.0
ARG TENSORFLOW_ARCH=gpu
ARG LASAGNE_VERSION=master
ARG TORCH_VERSION=latest
ARG CAFFE_VERSION=master
ARG PYTORCH_VERSION=0.3.0
ARG ANACONDA_VERSION=Miniconda2-latest
ARG PYTHON=2
ARG PYTHON_VERSION=2.7

## remove broken cuda links 
RUN rm /etc/apt/sources.list.d/cuda.list && \
	rm /etc/apt/sources.list.d/nvidia-ml.list

## install basic dependencies
RUN apt-get update && apt-get install -y \
	curl \
    git \
    g++ \
    libssl-dev \
    software-properties-common \
    sudo \
    wget

## Dependencies of caffe and torch
RUN apt-get update && apt-get install -y \
		libgflags-dev \
		libgoogle-glog-dev \
		libleveldb-dev \
		liblmdb-dev \
		&& \
	apt-get clean && \
	apt-get autoremove && \
	rm -rf /var/lib/apt/lists/*

# conda required for pytorch installation
# see https://docs.anaconda.com/anaconda/packages/oldpkglists/ to get compatibility with python x.x versions
# conda required for pytorch installation
RUN wget https://repo.anaconda.com/miniconda/${ANACONDA_VERSION}-Linux-x86_64.sh \
    && bash ${ANACONDA_VERSION}-Linux-x86_64.sh -b -p /usr/local/miniconda${PYTHON} \
    && rm -f ${ANACONDA_VERSION}-Linux-x86_64.sh
ENV PATH="/usr/local/miniconda${PYTHON}/bin:${PATH}"

# change default python environment to 3.5 & update to latest compatible versions
# RUN conda install -y python=3.5
# RUN conda update conda anaconda

# Add SNI support to Python
# install useful packages if not present
RUN python -m pip install \
		pyopenssl \
		ndg-httpsclient \
		pyasn1 \
		Cython \
		path.py \
		Pillow \
		pygments \
		sphinx \
        wheel

## pytorch dependencies & useful softwares
RUN conda install notebook
RUN conda install -c intel mkl boost=1.61.0
RUN conda install -c menpo opencv3
RUN conda install -y numpy ninja scipy pyyaml setuptools cmake cffi
RUN python -m pip install pathlib scikit-image

# Add LAPACK support for the GPU
RUN conda install -c soumith magma-cuda80

## pytorch installation
RUN git clone https://github.com/pytorch/pytorch.git /usr/local/pytorch
RUN cd /usr/local/pytorch && git checkout "v$PYTORCH_VERSION"
RUN cd /usr/local/pytorch && git submodule sync && git submodule update --init --recursive
RUN export CMAKE_PREFIX_PATH=${CONDA_PREFIX:-"$(dirname $(which conda))/../"}
RUN cd /usr/local/pytorch && python setup.py install
RUN rm -rf /usr/local/pytorch

## can be used if torchvision is needed
## RUN python -m pip install torchvision==0.1.9

# Install Torch
RUN git clone --recursive https://github.com/torch/distro.git /usr/local/torch && \
	cd /usr/local/torch && \
	bash install-deps && \
	yes | bash ./install.sh
	
# Export the LUA evironment variables manually
ENV LUA_PATH='/usr/local/.luarocks/share/lua/5.1/?.lua;/usr/local/.luarocks/share/lua/5.1/?/init.lua;/usr/local/torch/install/share/lua/5.1/?.lua;/usr/local/torch/install/share/lua/5.1/?/init.lua;./?.lua;/usr/local/torch/install/share/luajit-2.1.0-beta1/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua' \
	LUA_CPATH='/usr/local/.luarocks/lib/lua/5.1/?.so;/usr/local/torch/install/lib/lua/5.1/?.so;./?.so;/usr/local/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so' \
	PATH=/usr/local/torch/install/bin:$PATH \
	LD_LIBRARY_PATH=/usr/local/torch/install/lib:$LD_LIBRARY_PATH \
	DYLD_LIBRARY_PATH=/usr/local/torch/install/lib:$DYLD_LIBRARY_PATH
ENV LUA_CPATH='/usr/local/torch/install/lib/?.so;$LUA_CPATH'

## loadcaffe needs protobuf
RUN conda install -c conda-forge protobuf=3.2.0

# Install the latest versions of nn, cutorch, cunn, cuDNN bindings and iTorch
RUN luarocks install nn && \
	luarocks install cutorch && \
	luarocks install cunn && \
    luarocks install loadcaffe

RUN cd /usr/local && git clone https://github.com/soumith/cudnn.torch.git && cd cudnn.torch && \
	git checkout R4 && \
	luarocks make

# Install the latest version of iTorch and its dependencies
RUN	luarocks install lbase64 && \
	luarocks install luacrypto && \
	luarocks install uuid && \
	luarocks install lzmq

RUN	cd /usr/local && git clone https://github.com/facebook/iTorch.git && \
	cd iTorch && \
	luarocks make

## Required by theano
RUN python -m pip install msgpack pydot-ng parameterized mako
RUN conda install -c conda-forge blas

# Install Theano and set up Theano config (.theanorc) for CUDA and OpenBLAS
RUN git clone https://github.com/Theano/libgpuarray.git /usr/local/libgpuarray
RUN cd /usr/local/libgpuarray && git checkout tags/v0.7.6 -b v0.7.6
RUN cd /usr/local/libgpuarray && mkdir Build && cd Build && \
    cmake .. -DCMAKE_BUILD_TYPE=Release && \
    make && make install
RUN cd /usr/local/libgpuarray && python setup.py build && python setup.py install 
RUN ldconfig

# Install Theano and set up Theano config (.theanorc) for CUDA and OpenBLAS
RUN pip --no-cache-dir install git+git://github.com/Theano/Theano.git@${THEANO_VERSION}

## set theano default to cuda
ENV THEANO_FLAGS=mode=FAST_RUN,device=cuda,floatX=float32

## install pylearn2
RUN cd /usr/local && git clone git://github.com/thomkallor/pylearn2.git && \
    cd pylearn2 && \
    python setup.py develop && \
	mkdir data

# Install lasagne
RUN pip --no-cache-dir install git+git://github.com/Lasagne/Lasagne.git@${LASAGNE_VERSION}

## data path for pylearn
ENV PYLEARN2_DATA_PATH=/usr/local/pylearn2/data

RUN conda install -c conda-forge protobuf=3.2.0 hdf5 openblas
RUN python -m pip install --upgrade msgpack python-dateutil pytest
RUN conda install -c mvn libsnappy

RUN git clone https://github.com/BVLC/caffe.git /usr/local/caffe

RUN cd /usr/local/caffe && mkdir build && cd build && \
	cmake -DPYTHON_INCLUDE_DIR=/usr/local/miniconda${PYTHON}/include/python${PYTHON_VERSION} \
	-DPYTHON_INCLUDE_DIR2=/usr/local/miniconda${PYTHON}/include/python${PYTHON_VERSION} \
	-DPYTHON_LIBRARY=/usr/local/miniconda${PYTHON}/lib/libpython${PYTHON_VERSION}.so \
	-Dpython_version=${PYTHON} \
	-DUSE_CUDNN=1 \
	-DBLAS=Open \
	..  && \
	make -j"$(nproc)" all && \
	make install

# Set up Caffe environment variables
ENV CAFFE_ROOT=/usr/local/caffe
ENV PYCAFFE_ROOT=$CAFFE_ROOT/python
ENV PYTHONPATH=$PYCAFFE_ROOT:$PYTHONPATH \
	PATH=$CAFFE_ROOT/build/tools:$PYCAFFE_ROOT:$PATH
RUN echo "$CAFFE_ROOT/build/lib" >> /etc/ld.so.conf.d/caffe.conf && ldconfig

## install cuda 7.0 and cudnn6.5 for tensorflow
RUN wget http://developer.download.nvidia.com/compute/cuda/7_0/Prod/local_installers/rpmdeb/cuda-repo-ubuntu1410-7-0-local_7.0-28_amd64.deb
RUN yes | dpkg -i ./cuda-repo-ubuntu1410-7-0-local_7.0-28_amd64.deb
RUN apt-get update && apt-get install -y cuda-toolkit-7-0
RUN rm cuda-repo-ubuntu1410-7-0-local_7.0-28_amd64.deb
ENV LD_LIBRARY_PATH=/usr/local/cuda-7.0/lib64:$LD_LIBRARY_PATH

RUN git clone https://github.com/thomkallor/cudnn-6.5.git /usr/local/cudnn-6.5
ENV LD_LIBRARY_PATH=/usr/local/cudnn-6.5:$LD_LIBRARY_PATH
ENV LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64:$LD_LIBRARY_PATH

## use if you have to build from source
## build flaky and very long not recommended use wheel file if available
## require bazel 0.1.1 for tensorflow build
## change bazel version as per tensorflow
# RUN wget https://github.com/bazelbuild/bazel/releases/download/0.1.1/bazel-0.1.1-installer-linux-x86_64.sh
# RUN add-apt-repository ppa:openjdk-r/ppa
# RUN apt-get update && apt-get install -y \
#     bash-completion \
#     openjdk-8-jdk \
#     zip \
#     unzip \
#     swig 
# RUN sudo bash ./bazel-0.1.1-installer-linux-x86_64.sh
# RUN rm ./bazel-0.1.1-installer-linux-x86_64.sh

##configure tensorflow
# RUN git clone https://github.com/thomkallor/tensorflow.git
# RUN cd tensorflow && git checkout "v$TENSORFLOW_VERSION"
# RUN cd tensorflow &&  git submodule update --init --recursive

# ## link no longer exists had to cahe in manually
# RUN wget http://www.ijg.org/files/jpegsrc.v9a.tar.gz && \
# 	wget https://sourceforge.net/projects/libpng/files/libpng12/older-releases/1.2.53/libpng-1.2.53.tar.gz
# RUN mkdir --parents /root/.cache/bazel/_bazel_root/68a62076e91007a7908bc42a32e4cff9/external/jpeg_archive && \
# 	mkdir --parents /root/.cache/bazel/_bazel_root/68a62076e91007a7908bc42a32e4cff9/external/png_archive
# RUN cp jpegsrc.v9a.tar.gz /root/.cache/bazel/_bazel_root/68a62076e91007a7908bc42a32e4cff9/external/jpeg_archive && \
# 	cp libpng-1.2.53.tar.gz /root/.cache/bazel/_bazel_root/68a62076e91007a7908bc42a32e4cff9/external/png_archive
# RUN rm jpegsrc.v9a.tar.gz && rm libpng-1.2.53.tar.gz
# # not needed
# RUN cd tensorflow && git pull origin "v$TENSORFLOW_VERSION"
# COPY tfsettings.txt /root
# RUN cd tensorflow && cat /root/tfsettings.txt | ./configure

# RUN cd tensorflow && bazel build --verbose_failures --local_resources 4096,4.0,1.0 -c opt --config=cuda //tensorflow/tools/pip_package:build_pip_package

# RUN cd tensorflow && bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg
# RUN python -m pip install "/tmp/tensorflow_pkg/tensorflow-0.6.0-py3-none-any.whl"

RUN pip install --no-cache-dir install \
	https://storage.googleapis.com/tensorflow/linux/${TENSORFLOW_ARCH}/tensorflow-${TENSORFLOW_VERSION}-cp27-none-linux_x86_64.whl

RUN conda install mkl-service

# Set up notebook config
COPY jupyter_notebook_config.py /root/.jupyter/

# Jupyter has issues with being run directly: https://github.com/ipython/ipython/issues/7062
COPY run_jupyter.sh /root/

# Expose Ports for TensorBoard (6006), Ipython (8888)
EXPOSE 6006 8888

WORKDIR "/root"
CMD ["/bin/bash"]